{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"hwid","text":"<p>Extract the <code>hwid</code> on Windows, Linux, Mac. Cross-platform using Python, native OS detection.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Table of Contents</li> <li>Installation</li> <li>Usage</li> <li>Motivation</li> <li>Features</li> <li>Warning</li> <li>Author</li> <li>Disclaimer</li> <li>License</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install hwid\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#as-a-module","title":"As a Module","text":"<pre><code>import hwid\nprint(hwid.get_hwid())\n</code></pre>"},{"location":"#as-a-cli-tool","title":"As a CLI Tool","text":"<pre><code>uvx hwid\n</code></pre>"},{"location":"#motivation","title":"Motivation","text":"<p>TL;DR I don't want to copy and paste it again...</p> <p>I have created a bunch of desktop applications for Windows. I needed a way to license my applications for my users to use it without distributing to other people. I decided to use the hwid of the computer to license my applications. I needed a way to get the hwid of the computer, so I created this module. It has only one purpose: getting the hwid of the computer. It is cross-platform and does not require any external dependencies.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Cross-platform</li> <li>No external dependencies</li> <li>CLI</li> <li>Module</li> </ul>"},{"location":"#warning","title":"Warning","text":"<p>I do not recommend using this module for licensing purposes all alone. You can use it as a part of your licensing system.</p> <p>If you are using server-client architecture, you can send the encrypted hwid to the server and check if it is valid. But keep in mind, It's easy to intercept the http requests with mitmproxy or other tools.</p> <p>If you are using a local licensing system, you can encrypt the hwid and store it in a file. Then you can check if the encrypted hwid is valid. You can use pyarmor to obfuscate your code. It will make it harder to reverse engineer your code. Here is a NeuralNine Tutorial using Oxyry</p>"},{"location":"#development","title":"Development","text":"<p>Clone the repository and cd into the project directory:</p> <pre><code>git clone https://github.com/hasansezertasan/hwid\ncd hwid\n</code></pre> <p>The commands below can also be executed using the xc task runner, which combines the usage instructions with the actual commands. Simply run <code>xc</code>, it will popup an interactive menu with all available tasks.</p>"},{"location":"#checks","title":"<code>checks</code>","text":"<p>Run all checks to ensure code quality:</p> <pre><code>uvx \"validate-pyproject[all]\" pyproject.toml\nuvx typos\nuvx vulture .\nuvx ruff check\nuvx taplo lint pyproject.toml\nuvx ruff format\nuvx taplo format pyproject.toml\nuvx mypy\n</code></pre>"},{"location":"#docsserve","title":"<code>docs:serve</code>","text":"<p>Serve the documentation locally:</p> <pre><code>uvx --with-requirements requirements.docs.txt mkdocs serve\n</code></pre>"},{"location":"#docsbuild","title":"<code>docs:build</code>","text":"<p>Build the documentation locally:</p> <pre><code>uvx --with-requirements requirements.docs.txt mkdocs build\n</code></pre>"},{"location":"#author","title":"Author","text":"<ul> <li>hasansezertasan</li> </ul>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This module is not intended to be used for malicious purposes. The author is not responsible for any damage caused by this module. Use at your own risk.</p>"},{"location":"#license","title":"License","text":"<p><code>hwid</code> is distributed under the terms of the MIT license.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<ul> <li>Nothing yet.</li> </ul>"},{"location":"changelog/#010-2023-09-08","title":"0.1.0 - 2023-09-08","text":"<ul> <li>initial release</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Project Structure and modules</li> <li>Console Script</li> <li>Documentation</li> <li><code>CHANGELOG.md</code></li> <li><code>LICENSE</code></li> <li><code>README.md</code></li> </ul>"},{"location":"reference/","title":"API Reference","text":"<p>Core functionality for getting hardware IDs.</p>"},{"location":"reference/#hwid.core.get_hwid","title":"<code>get_hwid()</code>","text":"<p>Get the hardware ID of the current machine.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The hardware ID string.</p> <p>Raises:</p> Type Description <code>UnsupportedOSError</code> <p>If the operating system is not supported.</p> <code>InvalidHWIDError</code> <p>If the retrieved hardware ID is invalid.</p> Source code in <code>hwid/core.py</code> <pre><code>def get_hwid() -&gt; str:\n    \"\"\"Get the hardware ID of the current machine.\n\n    Returns:\n        str: The hardware ID string.\n\n    Raises:\n        UnsupportedOSError: If the operating system is not supported.\n        InvalidHWIDError: If the retrieved hardware ID is invalid.\n    \"\"\"\n    if platform in {\"linux\", \"linux2\"}:\n        command = \"sudo dmidecode -s system-uuid\"\n        output = subprocess.check_output(command, shell=True)\n        output = output.decode(\"utf-8\").strip()\n    elif platform == \"win32\":\n        command = 'powershell -Command \"(Get-CimInstance -ClassName Win32_ComputerSystemProduct).UUID\"'\n        output = subprocess.check_output(command, shell=True)\n        output = output.decode(\"utf-8\").strip()\n    elif platform == \"darwin\":\n        command = \"system_profiler SPHardwareDataType | grep 'UUID'\"\n        output = subprocess.check_output(command, shell=True)\n        output = output.decode(\"utf-8\").strip()\n        output = output.split(\":\")[1].strip()\n    else:\n        msg = \"Unsupported OS\"\n        raise UnsupportedOSError(msg)\n    if validate_hwid(value=output):\n        return output\n    msg = \"Invalid HWID\"\n    raise InvalidHWIDError(msg)\n</code></pre>"},{"location":"reference/#hwid.core.validate_hwid","title":"<code>validate_hwid(value)</code>","text":"<p>Validate if a string matches the HWID format.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The string to validate.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if valid, False otherwise.</p> Source code in <code>hwid/core.py</code> <pre><code>def validate_hwid(value: str) -&gt; bool:\n    \"\"\"Validate if a string matches the HWID format.\n\n    Args:\n        value: The string to validate.\n\n    Returns:\n        bool: True if valid, False otherwise.\n    \"\"\"\n    return bool(\n        re.match(r\"^[a-fA-F0-9]{8}-([a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}$\", value)\n    )\n</code></pre>"}]}