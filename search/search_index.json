{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"HWID <p> Extract the `hwid` on Windows, Linux, Mac. Cross-platform using Python, native OS detection. </p> <p> </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install hwid\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Module:</p> <pre><code>import hwid\nprint(hwid.get_hwid())\n# 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX'\n</code></pre> <p>CLI:</p> <pre><code>hwid\nXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n</code></pre>"},{"location":"#why","title":"Why?","text":"<p>I have created a bunch of desktop applications for Windows. I needed a way to license my applications for my users to use it without distributing to other people. I decided to use the hwid of the computer to license my applications. I needed a way to get the hwid of the computer, so I created this module. It has only one purpose: getting the hwid of the computer. It is cross-platform and does not require any external dependencies.</p> <p>I do not recommend using this module for licensing purposes all alone. You can use it as a part of your licensing system.</p> <p>If you are using server-client architecture, you can send the encrypted hwid to the server and check if it is valid. But keep in mind, It's easy to intercept the http requests with mitmproxy or other tools.</p> <p>If you are using a local licensing system, you can encrypt the hwid and store it in a file. Then you can check if the encrypted hwid is valid. You can use pyarmor to obfuscate your code. It will make it harder to reverse engineer your code. Here is a tutorial from @NeuralNine using Oxyry</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This module is not intended to be used for malicious purposes. The author is not responsible for any damage caused by this module. Use at your own risk.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<ul> <li>Nothing yet.</li> </ul>"},{"location":"changelog/#010-2023-09-08","title":"0.1.0 - 2023-09-08","text":"<ul> <li>initial release</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Project Structure and modules</li> <li>Console Script</li> <li>Documentation</li> <li><code>CHANGELOG.md</code></li> <li><code>LICENSE</code></li> <li><code>README.md</code></li> </ul>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#hwid.core.get_hwid","title":"<code>get_hwid()</code>","text":"<p>Gets the HWID.</p> Source code in <code>hwid/core.py</code> <pre><code>def get_hwid():\n    \"\"\"Gets the HWID.\"\"\"\n    if platform in [\"linux\", \"linux2\"]:\n        command = \"sudo dmidecode -s system-uuid\"\n        output = subprocess.check_output(command, shell=True)\n        output = output.decode(\"utf-8\").strip()\n    elif platform in [\"win32\"]:\n        command = \"wmic csproduct get uuid\"\n        output = subprocess.check_output(command, shell=True)\n        output = output.decode(\"utf-8\").strip()\n        output = output.split(\"\\n\")[1].strip()\n    elif platform in [\"darwin\"]:\n        command = \"system_profiler SPHardwareDataType | grep 'UUID'\"\n        output = subprocess.check_output(command, shell=True)\n        output = output.decode(\"utf-8\").strip()\n        output = output.split(\":\")[1].strip()\n    else:\n        raise UnsupportedOS(\"Unsupported OS\")\n    if validate_hwid(output):\n        return output\n    else:\n        raise InvalidHWID(\"Invalid HWID\")\n</code></pre>"}]}